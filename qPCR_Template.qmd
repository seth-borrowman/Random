---
title: "qPCR Template"
subtitle: "Add sample/run description"
author: "Seth Borrowman"
date: "10/08/2024"
format: pdf
---
```{r}
#| echo: false
#| warning: false
library(ggplot2)
library(magrittr)
library(dplyr)
library(tidyr)
library(broom)
library(pander)

# Import data
df <- readxl::read_xls("", # Insert file location
                       sheet = "Results",
                       skip = 46, # Might need to update? Look at excel file
                       na = c("", "Undetermined")) %>%
  mutate(Ct = CT) %>%
  mutate(Task = case_when(
    Task == "STANDARD" ~ "Standard",
    Task == "UNKNOWN" ~ "Unknown",
    .default = Task
  ))

# Separate standards and unknwons
standards <- df %>%
  filter(Task == "Standard") %>%
  mutate(`Target Name` = factor(`Target Name`))
unknowns <- df %>%
  filter(Task == "Unknown") %>%
  select(`Well Position`, `Sample Name`, `Target Name`, Task, Ct)
```
# Standard Curve
```{r}
#| echo: false
#| warning: false
#| fig-align: "center"

# Plot standard curves
ggplot(data = standards,
       aes(y = Quantity,
           x = Ct)) +
  geom_point(aes(color = `Target Name`)) +
  scale_y_continuous(transform = "log10") +
  geom_smooth(method = "lm",
              se = F,
              na.rm = T,
              aes(color = `Target Name`)) +
  theme_minimal()

# Table with std curve values
std_curve <- standards %>%
  group_by(`Sample Name`, `Target Name`) %>%
  summarise(Ct = mean(Ct, na.rm = T),
            .groups = "keep") %>%
  pivot_wider(names_from = `Target Name`,
              values_from = Ct)
std_curve <- std_curve[order(as.data.frame(std_curve)[,2]),]
pander::pander(std_curve, caption = "Standard curve mean Ct values")
```
```{r}
#| echo: false
#| warning: false
# Get efficiency and R2 for curves
efficiency_mod_1 <- lm(Ct ~ log10(Quantity),
                     data = standards %>%
                       filter(`Target Name` ==
                                levels(standards$`Target Name`)[1]))
efficiency1 <- 10^(-1/efficiency_mod_1$coefficients[[2]])
cat(paste0(levels(standards$`Target Name`)[1],
           " efficiency = ",
           round(efficiency1, digits = 2),
           " (",
           round((efficiency1/2) * 100, digits = 2),
           "%), R2 = ",
           round(summary(efficiency_mod_1)$r.squared, digits = 2),
           sep = ""))

efficiency_mod_2 <- lm(Ct ~ log10(Quantity),
                       data = standards %>%
                         filter(`Target Name` ==
                                  levels(standards$`Target Name`)[2]))
efficiency2 <- 10^(-1/efficiency_mod_2$coefficients[[2]])
cat(paste0(levels(standards$`Target Name`)[2],
           " efficiency = ",
           round(efficiency2, digits = 2),
           " (",
           round((efficiency2/2) * 100, digits = 2),
           "%), R2 = ",
           round(summary(efficiency_mod_2)$r.squared, digits = 2),
           sep = ""))
```
\newpage
# Check NTCs
```{r}
#| echo: false
#| warning: false
# Check NTCs 
ntc <- df %>%
  filter(Task == "NTC") %>%
  group_by(`Sample Name`, `Target Name`) %>%
  summarise(Ct = mean(Ct, na.rm = T),
            .groups = "keep") %>%
  pivot_wider(names_from = `Target Name`,
              values_from = Ct)
if(is.nan(as.data.frame(ntc)[1,2]) & is.nan(as.data.frame(ntc)[1,3])) {
  cat("NTC is negative")
} else {
  cat("Warning: NTC has positive signal")
}
pander::pander(ntc, caption = "NTC mean Ct")
```
# Predicted Quantities
```{r}
#| echo: false
#| warning: false
# Create predictive model
mod <- lm(log10(Quantity) ~ Ct + `Target Name`, standards)

preds <- predict(mod, unknowns, interval = "prediction") 
unknowns$Quantity <- 10^preds[,1]

quantities <- unknowns %>%
  group_by(`Sample Name`, `Target Name`) %>%
  summarise(Quantity = mean(Quantity, na.rm = T),
            .groups = "keep") %>%
  pivot_wider(names_from = `Target Name`,
              values_from = Quantity) %>%
  as.data.frame()
ratio_name <- paste(colnames(quantities)[3], ":",
                   colnames(quantities)[2], " Ratio", sep = "")
quantities$ratio <- (quantities[,3]) / (quantities[,2])
colnames(quantities)[4] <- ratio_name

pander::pander(quantities, caption = "Calculated gene copy #'s")

final_df <- rbind(unknowns,
                  standards %>%
                    select(which(colnames(standards) %in% colnames(unknowns))))
ggplot(data = final_df,
       aes(y = Quantity,
           x = Ct)) +
  geom_point(aes(color = `Target Name`, shape = Task, size = Task)) +
  scale_size_discrete(range = c(1, 2)) +
  scale_y_continuous(transform = "log10") +
  geom_smooth(method = "lm",
              se = F,
              na.rm = T,
              aes(color = `Target Name`),
              data = final_df %>% filter(Task == "Standard")) +
  theme_minimal()
```

